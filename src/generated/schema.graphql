### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CompoundNutritionFact {
  dailyValue: Float
  id: Int!
  ingredient: String!
  ingredients: [NutritionFact!]!
  measurements: Measurement!
  product: Product!
}

input CompoundNutritionFactInput {
  dailyValue: Float
  ingredient: String!
  ingredients: [NutritionFactInput!]!
  measurements: MeasurementInput!
  order: Int!
}

input CreateFaqInput {
  answer: String!
  id: Int
  question: String!
}

input CreateProductInput {
  compoundNutritionFacts: [CompoundNutritionFactInput!]!
  contains: String!
  cookingInstructions: String!
  ingredients: String!
  nutritionFacts: [NutritionFactInput!]!
  servingSize: MeasurementInput!
  shopifyId: Float!
}

type Faq {
  answer: String!
  id: Int!
  question: String!
}

type Image {
  alt: String
  created_at: String!
  height: Float!
  id: Int!
  position: Float!
  product_id: Int!
  src: String!
  updated_at: String!
  variant_ids: [Int!]!
  width: Float!
}

type Measurement {
  id: Int!
  type: MeasurementType!
  value: Float!
}

input MeasurementInput {
  type: MeasurementType!
  value: Float!
}

enum MeasurementType {
  GRAMS
  MILLAGRAMS
  UNITS
}

type Mutation {
  createFaq(data: CreateFaqInput!): Faq!
  createProduct(data: CreateProductInput!): Product!
  deleteFaq(id: Int!): Faq!
  updateFaq(data: UpdateFaqInput!, id: Int!): Faq!
  updateMeasurement(id: Int!, set: UpdateMeasurementInput!): Measurement!
  updateProduct(data: UpdateProductInput!, id: Int!): Product!
}

type NutritionFact {
  dailyValue: Float
  id: Int!
  ingredient: String!
  measurements: Measurement!
  product: Product!
}

input NutritionFactInput {
  dailyValue: Float
  ingredient: String!
  measurements: MeasurementInput!
  order: Int!
}

type Product {
  compoundNutritionFacts: [CompoundNutritionFact!]!
  contains: String!
  cookingInstructions: String!
  id: Int!
  image: Image!
  ingredients: String!
  name: String!
  nutritionFacts: [NutritionFact!]!
  servingSize: Measurement!
  shopifyId: Float!
}

type Query {
  faqs: [Faq!]!
  productByShopifyId(shopifyId: Int!): Product!
  products: [Product!]!
  shopifyProducts: [ShopifyProduct!]!
}

type ShopifyProduct {
  id: Float!
  image: Image!
  name: String!
}

input UpdateFaqInput {
  answer: String!
  question: String!
}

input UpdateMeasurementInput {
  type: MeasurementType!
  value: Float!
}

input UpdateProductInput {
  compoundNutritionFacts: [CompoundNutritionFactInput!]!
  contains: String!
  cookingInstructions: String!
  ingredients: String!
  nutritionFacts: [NutritionFactInput!]!
  servingSize: MeasurementInput!
}
