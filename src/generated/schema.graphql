### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CompoundNutritionFact {
  id: Int!
  ingredient: String!
  ingredients: [NutritionFact!]!
  measurements: Measurement!
  product: Product!
}

input CompoundNutritionFactInput {
  ingredient: String!
  ingredients: [NutritionFactInput]
  measurements: MeasurementInput
}

input CreateFaqInput {
  answer: String!
  question: String!
}

input CreateProductInput {
  compoundNutritionFacts: [CompoundNutritionFactInput]
  contains: [String!]!
  cookingInstructions: String!
  ingredients: [String!]!
  nutritionFacts: [NutritionFactInput]
  shopifyId: Int!
}

type Faq {
  answer: String!
  id: Int!
  question: String!
}

type Image {
  alt: String
  created_at: String
  height: Float
  id: Int
  position: Float
  product_id: Int
  src: String
  updated_at: String
  variant_ids: [Int]
  width: Float
}

type Measurement {
  id: Int!
  type: MeasurementType!
  value: Float!
}

input MeasurementInput {
  type: MeasurementType!
  value: Float!
}

enum MeasurementType {
  GRAMS
  MILLAGRAMS
  UNITS
}

type Mutation {
  create_product(input: CreateProductInput): Product
  createFaq(data: CreateFaqInput): Faq
  deleteFaq(id: Int): Faq
  updateFaq(data: UpdateFaqInput, id: Int): Faq
  updateMeasurement(id: Int, set: UpdateMeasurementInput): Measurement
}

type NutritionFact {
  id: Int!
  ingredient: String!
  measurements: Measurement!
  product: Product!
}

input NutritionFactInput {
  ingredient: String!
  measurements: MeasurementInput
}

type Product {
  compoundNutritionFacts: [CompoundNutritionFact!]!
  cookingInstructions: String!
  id: Int!
  ingredients: [String!]!
  nutritionFacts: [NutritionFact!]!
  shopifyId: Int!
}

type Query {
  faqs: [Faq]
  productByShopifyId(shopifyId: Int): Product
  products: [Product]
}

input UpdateFaqInput {
  answer: String!
  question: String!
}

input UpdateMeasurementInput {
  type: MeasurementType!
  value: Float!
}
