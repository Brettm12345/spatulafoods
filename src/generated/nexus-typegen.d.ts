/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context as ContextModule } from "./../server/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CompoundNutritionFactInput: { // input type
    ingredient: string; // String!
    ingredients: NexusGenInputs['NutritionFactInput'][]; // [NutritionFactInput!]!
    measurements: NexusGenInputs['MeasurementInput']; // MeasurementInput!
  }
  CreateFaqInput: { // input type
    answer: string; // String!
    id?: number | null; // Int
    question: string; // String!
  }
  CreateProductInput: { // input type
    compoundNutritionFacts: NexusGenInputs['CompoundNutritionFactInput'][]; // [CompoundNutritionFactInput!]!
    contains: string; // String!
    cookingInstructions: string; // String!
    ingredients: string; // String!
    nutritionFacts: NexusGenInputs['NutritionFactInput'][]; // [NutritionFactInput!]!
    servingSize: NexusGenInputs['MeasurementInput']; // MeasurementInput!
    shopifyId: number; // Float!
  }
  MeasurementInput: { // input type
    type: NexusGenEnums['MeasurementType']; // MeasurementType!
    value: number; // Float!
  }
  NutritionFactInput: { // input type
    ingredient: string; // String!
    measurements: NexusGenInputs['MeasurementInput']; // MeasurementInput!
  }
  UpdateFaqInput: { // input type
    answer: string; // String!
    question: string; // String!
  }
  UpdateMeasurementInput: { // input type
    type: NexusGenEnums['MeasurementType']; // MeasurementType!
    value: number; // Float!
  }
}

export interface NexusGenEnums {
  MeasurementType: "GRAMS" | "MILLAGRAMS" | "UNITS"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CompoundNutritionFact: { // root type
    id: number; // Int!
    ingredient: string; // String!
  }
  Faq: { // root type
    answer: string; // String!
    id: number; // Int!
    question: string; // String!
  }
  Image: { // root type
    alt?: string | null; // String
    created_at: string; // String!
    height: number; // Float!
    id: number; // Int!
    position: number; // Float!
    product_id: number; // Int!
    src: string; // String!
    updated_at: string; // String!
    variant_ids: number[]; // [Int!]!
    width: number; // Float!
  }
  Measurement: { // root type
    id: number; // Int!
    type: NexusGenEnums['MeasurementType']; // MeasurementType!
    value: number; // Float!
  }
  Mutation: {};
  NutritionFact: { // root type
    id: number; // Int!
    ingredient: string; // String!
  }
  Product: { // root type
    contains: string; // String!
    cookingInstructions: string; // String!
    id: number; // Int!
    ingredients: string; // String!
    shopifyId: number; // Float!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CompoundNutritionFact: { // field return type
    id: number; // Int!
    ingredient: string; // String!
    ingredients: NexusGenRootTypes['NutritionFact'][]; // [NutritionFact!]!
    measurements: NexusGenRootTypes['Measurement']; // Measurement!
    product: NexusGenRootTypes['Product']; // Product!
  }
  Faq: { // field return type
    answer: string; // String!
    id: number; // Int!
    question: string; // String!
  }
  Image: { // field return type
    alt: string | null; // String
    created_at: string; // String!
    height: number; // Float!
    id: number; // Int!
    position: number; // Float!
    product_id: number; // Int!
    src: string; // String!
    updated_at: string; // String!
    variant_ids: number[]; // [Int!]!
    width: number; // Float!
  }
  Measurement: { // field return type
    id: number; // Int!
    type: NexusGenEnums['MeasurementType']; // MeasurementType!
    value: number; // Float!
  }
  Mutation: { // field return type
    create_product: NexusGenRootTypes['Product']; // Product!
    createFaq: NexusGenRootTypes['Faq']; // Faq!
    deleteFaq: NexusGenRootTypes['Faq']; // Faq!
    updateFaq: NexusGenRootTypes['Faq']; // Faq!
    updateMeasurement: NexusGenRootTypes['Measurement']; // Measurement!
  }
  NutritionFact: { // field return type
    id: number; // Int!
    ingredient: string; // String!
    measurements: NexusGenRootTypes['Measurement']; // Measurement!
    product: NexusGenRootTypes['Product']; // Product!
  }
  Product: { // field return type
    compoundNutritionFacts: NexusGenRootTypes['CompoundNutritionFact'][]; // [CompoundNutritionFact!]!
    contains: string; // String!
    cookingInstructions: string; // String!
    id: number; // Int!
    image: NexusGenRootTypes['Image']; // Image!
    ingredients: string; // String!
    name: string; // String!
    nutritionFacts: NexusGenRootTypes['NutritionFact'][]; // [NutritionFact!]!
    servingSize: NexusGenRootTypes['Measurement']; // Measurement!
    shopifyId: number; // Float!
  }
  Query: { // field return type
    faqs: NexusGenRootTypes['Faq'][]; // [Faq!]!
    productByShopifyId: NexusGenRootTypes['Product']; // Product!
    products: NexusGenRootTypes['Product'][]; // [Product!]!
  }
}

export interface NexusGenFieldTypeNames {
  CompoundNutritionFact: { // field return type name
    id: 'Int'
    ingredient: 'String'
    ingredients: 'NutritionFact'
    measurements: 'Measurement'
    product: 'Product'
  }
  Faq: { // field return type name
    answer: 'String'
    id: 'Int'
    question: 'String'
  }
  Image: { // field return type name
    alt: 'String'
    created_at: 'String'
    height: 'Float'
    id: 'Int'
    position: 'Float'
    product_id: 'Int'
    src: 'String'
    updated_at: 'String'
    variant_ids: 'Int'
    width: 'Float'
  }
  Measurement: { // field return type name
    id: 'Int'
    type: 'MeasurementType'
    value: 'Float'
  }
  Mutation: { // field return type name
    create_product: 'Product'
    createFaq: 'Faq'
    deleteFaq: 'Faq'
    updateFaq: 'Faq'
    updateMeasurement: 'Measurement'
  }
  NutritionFact: { // field return type name
    id: 'Int'
    ingredient: 'String'
    measurements: 'Measurement'
    product: 'Product'
  }
  Product: { // field return type name
    compoundNutritionFacts: 'CompoundNutritionFact'
    contains: 'String'
    cookingInstructions: 'String'
    id: 'Int'
    image: 'Image'
    ingredients: 'String'
    name: 'String'
    nutritionFacts: 'NutritionFact'
    servingSize: 'Measurement'
    shopifyId: 'Float'
  }
  Query: { // field return type name
    faqs: 'Faq'
    productByShopifyId: 'Product'
    products: 'Product'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    create_product: { // args
      input: NexusGenInputs['CreateProductInput']; // CreateProductInput!
    }
    createFaq: { // args
      data: NexusGenInputs['CreateFaqInput']; // CreateFaqInput!
    }
    deleteFaq: { // args
      id: number; // Int!
    }
    updateFaq: { // args
      data: NexusGenInputs['UpdateFaqInput']; // UpdateFaqInput!
      id: number; // Int!
    }
    updateMeasurement: { // args
      id: number; // Int!
      set: NexusGenInputs['UpdateMeasurementInput']; // UpdateMeasurementInput!
    }
  }
  Query: {
    productByShopifyId: { // args
      shopifyId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextModule;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}